# -*- coding: utf-8-*-
import os
import re
import twitter
import jasperpath
import yaml
import base64

WORDS = ["TRUMP TWEETS"]



def replace_special_characters(text):
    """
    Replace common twitter symbols for more natural tweet reading
    """
    text = re.sub(r'@FLOTUS', 'First Lady', text)
    text = re.sub(r'#', 'hash tag ', text)
    text = re.sub(r'@+', 'AT ',text)

    return text


def remove_training_url(text):
    """
    remove the url often found at the end of tweets
    """



class twitter_credentials:
    def __init__(self):
        self.config = self.get_config()


    def get_config(self):
        config = {}
        # try to get twitter credentials from config
        profile_path = jasperpath.config('profile.yml')
        if os.path.exists(profile_path):
            with open(profile_path, 'r') as file:
                profile = yaml.safe_load(file)

                config['access_token'] = None
                config['access_token_secret'] = None

                if 'twitter' in profile:
                    # Consumer_key and secret are only valid as a pair
                    if 'consumer_key' in profile['twitter']:
                        if 'consumer_secret' in profile['twitter']:
                            config['consumer_key'] = \
                                base64.b64decode(profile['twitter']['consumer_key'])
                            config['consumer_secret'] = \
                                base64.b64decode(profile['twitter']['consumer_secret'])
                    # Token & its secret are non-essential (though very common)
                    # entities in twitter authentication
                    if 'access_token' in profile['twitter']:
                        if 'access_token_secret' in profile['twitter']:
                            config['access_token'] = \
                                base64.b64decode(profile['twitter']['access_token'])
                            config['access_token_secret'] = \
                                base64.b64decode(profile['twitter']['access_token_secret'])


        return config


def handle(text, mic, profile):
    """
    Reads Donald Trump's latest tweet outloud
    """
    twitter_config=twitter_credentials().get_config()

    api = twitter.Api(consumer_key=twitter_config['consumer_key'],
                      consumer_secret=twitter_config['consumer_secret'],
                      access_token_key=twitter_config['access_token'],
                      access_token_secret=twitter_config['access_token_secret'],
                      tweet_mode='extended')

    statuses = api.GetUserTimeline(screen_name='realDonaldTrump')
    latest = statuses[0]
    #print(latest)
    output = latest.full_text
    output = replace_special_characters(output)

    print("????????????????????????????????????????")
    print("????????????????????????????????????????")
    print("??????????????????????+   ,?????????????")
    print("???????I ???????????.          I????????")
    print("???????    ????????+            ????????")
    print("???????=     ??????           +?????????")
    print("????????                      ??????????")
    print("???????                       ??????????")
    print("????????                      ??????????")
    print("?????????                    ???????????")
    print("?????????=?.                ????????????")
    print("??????????                 .????????????")
    print("????????????              I?????????????")
    print("????????????I            ???????????????")
    print("??????I               :?????????????????")
    print("??????????=       ,I????????????????????")
    print("????????????????????????????????????????")
    print("????????????????????????????????????????")

    print(latest.full_text)
    mic.say(output)

def isValid(text):
    """
    Returns true if Jasper hears "Trump Tweets"
    """
    return bool(re.search(r'\btrump|tweet|tweets|twitter\b', text, re.IGNORECASE))
